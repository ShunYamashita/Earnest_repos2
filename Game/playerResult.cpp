//--------------------------------------------------------------------------------------
//  プレイヤー   ( player.cpp )
//
//  Author : SHUN YAMASHITA
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  ヘッダーファイル
//--------------------------------------------------------------------------------------
#include "playerResult.h"
#include "manager.h"

//--------------------------------------------------------------------------------------
//  マクロ定義
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  インスタンス生成
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  プレイヤークラスのコンストラクタ
//--------------------------------------------------------------------------------------
PlayerResult::PlayerResult( int nPriority ) : SceneModelAnim( nPriority )
{
	m_beforePos = D3DXVECTOR3( 0.0f , 0.0f , 0.0f );
	m_vecDirect = D3DXVECTOR3( 0.0f , 0.0f , 1.0f );
	m_fSpeed = 0.0f;
	m_pStateAnimator = NULL;
}

//--------------------------------------------------------------------------------------
//  プレイヤークラスのデストラクタ
//--------------------------------------------------------------------------------------
PlayerResult::~PlayerResult( )
{

}

//--------------------------------------------------------------------------------------
//  プレイヤーの初期化処理
//--------------------------------------------------------------------------------------
HRESULT PlayerResult::Init( void )
{
	//  シーンモデル
	SceneModelAnim::Init( );

	//  物体の種類の設定
	Scene::SetObjType( Scene::OBJTYPE_PLAYER );

	//  ステートマシン( アニメーター )の生成
	m_pStateAnimator = StateAnimator::Create( StateAnimator::MOTION_NEUTRAL );

	//  方向ベクトルの代入
	D3DXVec3Normalize( &m_vecDirect , &( m_posAt - m_position ) );

	return S_OK;
}

//--------------------------------------------------------------------------------------
//  プレイヤーの終了処理
//--------------------------------------------------------------------------------------
void PlayerResult::Uninit( void )
{
	//  シーンモデル
	SceneModelAnim::Uninit( );
}

//--------------------------------------------------------------------------------------
//  プレイヤーの更新処理
//--------------------------------------------------------------------------------------
void PlayerResult::Update( void )
{
	//  シーンモデル
	SceneModelAnim::Update( );
}

//--------------------------------------------------------------------------------------
//  プレイヤーの描画処理
//--------------------------------------------------------------------------------------
void PlayerResult::Draw( void )
{
	//  シーンモデル
	SceneModelAnim::Draw( );
}

//--------------------------------------------------------------------------------------
//  プレイヤーの勝利処理
//--------------------------------------------------------------------------------------
void PlayerResult::Win( void )
{
	if( m_pStateAnimator->SetMotion( StateAnimator::MOTION_RESULT_WIN ) )
	{
		SetAnimation( StateAnimator::MOTION_RESULT_WIN );
	}	
}

//--------------------------------------------------------------------------------------
//  プレイヤーの敗北処理
//--------------------------------------------------------------------------------------
void PlayerResult::Lose( void )
{
	if( m_pStateAnimator->SetMotion( StateAnimator::MOTION_RESULT_LOSE ) )
	{
		SetAnimation( StateAnimator::MOTION_RESULT_LOSE );
	}	
}

//--------------------------------------------------------------------------------------
//  インスタンス生成をする関数
//--------------------------------------------------------------------------------------
PlayerResult* PlayerResult::Create( D3DXVECTOR3 position , D3DXVECTOR3 posAt , D3DXVECTOR3 rot , D3DXVECTOR3 scale , float fSpeed , int nPriority )
{
	PlayerResult* pPlayerResult;

	//  インスタンス生成
	pPlayerResult = new PlayerResult( nPriority );

	//  モデルの種類の代入
	pPlayerResult->m_type = SceneModelAnim::TYPE_PLAYER;

	//  座標の代入
	pPlayerResult->m_position = position;

	//  最初の座標の代入
	pPlayerResult->m_firstPos = position;

	//  注視点座標の代入
	pPlayerResult->m_posAt = posAt;

	//  回転角の代入
	pPlayerResult->m_rot = rot;

	//  大きさ倍率の代入
	pPlayerResult->m_scale = scale;

	//  初期化
	pPlayerResult->Init( );

	return pPlayerResult;
}
