//--------------------------------------------------------------------------------------
//  ブレイブ   ( brave.cpp )
//
//  Author : SHUN YAMASHITA
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  ヘッダーファイル
//--------------------------------------------------------------------------------------
#include <stdio.h>
#include "brave.h"
#include "texture.h"
#include "manager.h"
#include "renderer.h"

//--------------------------------------------------------------------------------------
//  マクロ定義
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  インスタンス生成
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  2Dポリゴンクラスのコンストラクタ
//--------------------------------------------------------------------------------------
Brave::Brave( )
{
	//  情報の代入
	m_position = D3DXVECTOR3( 0.0f , 0.0f , 0.0f );
	m_size = D3DXVECTOR3( 0.0f , 0.0f , 0.0f );
	m_color = D3DXCOLOR( 1.0f , 1.0f , 1.0f , 1.0f );
	m_nBrave = 0;
	m_nBaseBrave = 0;
}

//--------------------------------------------------------------------------------------
//  2Dポリゴンクラスのコンストラクタ
//--------------------------------------------------------------------------------------
Brave::Brave( D3DXVECTOR3 position , D3DXVECTOR3 size )
{
	//  情報の代入
	m_position = position;
	m_size = size;
	m_fEndBrave = 0.0f;
	m_nBrave = 0;
	m_nBaseBrave = 0;
}

//--------------------------------------------------------------------------------------
//  2Dポリゴンクラスのデストラクタ
//--------------------------------------------------------------------------------------
Brave::~Brave( )
{

}

//--------------------------------------------------------------------------------------
//  2Dポリゴンの初期化処理
//--------------------------------------------------------------------------------------
HRESULT Brave::Init( void )
{
	//  数字の一時格納
	int nBrave = m_nBrave;
	int nNumber = 0;

	//  桁数分のループ
	for( int nCntDigit = m_nNumDigit - 1; nCntDigit >= 0; nCntDigit-- )
	{
		//  下1桁目を抽出
		nNumber = nBrave % 10;
		
		//  下1桁目の削除
		nBrave /= 10;

		//  数字クラスの生成
		m_pNumber.push_back( Number::Create( D3DXVECTOR3( m_position.x + m_size.x * nCntDigit , m_position.y , 0.0f ) ,
														   m_size , D3DXVECTOR2( 0.0f , 0.0f ) , D3DXVECTOR2( 5.0f , 2.0f ) , 
														   nNumber ) );
	}

	return S_OK;
}

//--------------------------------------------------------------------------------------
//  2Dポリゴンの終了処理
//--------------------------------------------------------------------------------------
void Brave::Uninit( void )
{
	std::list< Number* >::iterator it;

	//  要素の全削除
    for( it = m_pNumber.begin( ); it != m_pNumber.end( ); ) 
	{
		if( ( *it ) == NULL )
		{
			it = m_pNumber.erase( it );

			continue;
		}

		//  次の要素へ
		it++;
	}
}

//--------------------------------------------------------------------------------------
//  2Dポリゴンの更新処理
//--------------------------------------------------------------------------------------
void Brave::Update( void )
{
	std::list< Number* >::iterator it;

	//  数字の一時格納
	int nBrave = m_nBrave;
	int nNumber = 0;

	//  要素の全更新
    for( it = m_pNumber.begin( ); it != m_pNumber.end( ); ++it ) 
	{
		//  下1桁目を抽出
		nNumber = nBrave % 10;
		
		//  下1桁目の削除
		nBrave /= 10;
		
		//  値の格納
		( *it )->SetNumber( nNumber );
	}

	//  体力を目標に徐々に変更
	m_nBrave += ( int )( ( m_fEndBrave - ( float )m_nBrave ) * 0.1f );

	if( m_nBrave <= 0 )
	{
		m_nBrave = 0;
	}
}

//--------------------------------------------------------------------------------------
//  2Dポリゴンの描画処理
//--------------------------------------------------------------------------------------
void Brave::Draw( void )
{
}

//--------------------------------------------------------------------------------------
//  インスタンス生成をする関数
//--------------------------------------------------------------------------------------
Brave* Brave::Create( D3DXVECTOR3 position , D3DXVECTOR3 size , int nBaseBrave , int nNumDigit )
{
	Brave* pBrave;

	//  インスタンス生成
	pBrave = new Brave;

	//  座標の代入
	pBrave->m_position = position;

	//  大きさの代入
	pBrave->m_size = size;

	//  基準体力値の代入
	pBrave->m_nBaseBrave = nBaseBrave;

	//  体力値の代入
	pBrave->m_nBrave = nBaseBrave;

	//  目標体力値の代入
	pBrave->m_fEndBrave = ( float )nBaseBrave;

	//  桁数
	pBrave->m_nNumDigit = nNumDigit;

	//  初期化
	pBrave->Init( );

	return pBrave;
}

//--------------------------------------------------------------------------------------
//  体力の設定をする関数
//--------------------------------------------------------------------------------------
void Brave::SetBrave( int nBrave )
{
	m_nBrave = nBrave;
}

//--------------------------------------------------------------------------------------
//  目標体力の設定をする関数
//--------------------------------------------------------------------------------------
void Brave::SetEndBrave( int nBrave )
{
	m_fEndBrave = ( float )nBrave;
}