//--------------------------------------------------------------------------------------
//  プレイヤーステート( ニュートラル )   ( playerNeutral.cpp )
//
//  Author : SHUN YAMASHITA
//
//  Update : 2017/11/25
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  ヘッダーファイル
//--------------------------------------------------------------------------------------
#include "playerNeutral.h"
#include "player.h"
#include "manager.h"
#include "keyboard.h"
#include "joystick.h"
#include "game.h"
#include "camera.h"
#include "effekseerManager.h"

//--------------------------------------------------------------------------------------
//  マクロ定義
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  初期化処理をする関数
//--------------------------------------------------------------------------------------
void PlayerNeutral::Init( void )
{
	//  親の初期化
	PlayerState::Init( );
}

//--------------------------------------------------------------------------------------
//  終了処理をする関数
//--------------------------------------------------------------------------------------
void PlayerNeutral::Uninit( void )
{

}

//--------------------------------------------------------------------------------------
//  更新処理をする関数
//--------------------------------------------------------------------------------------
void PlayerNeutral::Update( void )
{
	//  カメラ制御
	ControlCamera( );

	//  重力をかける
	AddGravity( );

	//  移動状態に変更するかの判定
	JudgeChangeMove( );

	//  ジャンプ状態に変更するかの判定
	JudgeChangeJump( );

	//  HP攻撃000状態に変更するかの判定
	JudgeChangeHPAttack000( );

	//  ブレイブ攻撃000状態に変更するかの判定
	JudgeChangeBraveAttack000( );

	//  防御状態に変更するかの判断
	JudgeChangeGuard( );

	//  ロックオンダッシュ状態に変更するかの判断
	JudgeChangeLockonDash( );

	//  魔法準備状態に変更するかの判断
	JudgeChangeMagicReady( );
}

//--------------------------------------------------------------------------------------
//  描画処理をする関数
//--------------------------------------------------------------------------------------
void PlayerNeutral::Draw( void )
{

}