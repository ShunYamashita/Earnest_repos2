//--------------------------------------------------------------------------------------
//  3Dベクタークラス   ( vector3D.cpp )
//
//  Author : SHUN YAMASHITA
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//  ヘッダーファイル
//--------------------------------------------------------------------------------------
#include "vector3D.h"

//--------------------------------------------------------------------------------------
//  3Dベクタークラスのコンストラクタ
//--------------------------------------------------------------------------------------
Vector3D::Vector3D( )
{
	x = 0.0;
	y = 0.0;
	z = 0.0;
}

/*
//--------------------------------------------------------------------------------------
//  3Dベクタークラスのコンストラクタ
//--------------------------------------------------------------------------------------
Vector3D::Vector3D( float workX , float workY , float workZ )
: x( workX )
, y( workY )
, z( workZ )
{

}
*/

//--------------------------------------------------------------------------------------
//  3Dベクタークラスのデストラクタ
//--------------------------------------------------------------------------------------
Vector3D::~Vector3D( )
{

}

//--------------------------------------------------------------------------------------
//  オペレータ演算子＋
//--------------------------------------------------------------------------------------
Vector3D Vector3D::operator+( const Vector3D &vector3D )
{
	Vector3D workVector;					//  2Dベクタークラス格納用

	//  XYZ軸それぞれの足し算
	workVector.x = x + vector3D.x;
	workVector.y = y + vector3D.y;
	workVector.z = z + vector3D.z;

	return workVector;
}

//--------------------------------------------------------------------------------------
//  オペレータ演算子－
//--------------------------------------------------------------------------------------
Vector3D Vector3D::operator-( const Vector3D &vector3D )
{
	Vector3D workVector;					//  2Dベクタークラス格納用

	//  XYZ軸それぞれの引き算
	workVector.x = x - vector3D.x;
	workVector.y = y - vector3D.y;
	workVector.z = z - vector3D.z;

	return workVector;
}

//--------------------------------------------------------------------------------------
//  オペレータ演算子×
//--------------------------------------------------------------------------------------
Vector3D Vector3D::operator*( const Vector3D &vector3D )
{
	Vector3D workVector;					//  2Dベクタークラス格納用

	//  XYZ軸それぞれの掛け算
	workVector.x = x * vector3D.x;
	workVector.y = y * vector3D.y;
	workVector.z = z * vector3D.z;

	return workVector;
}

//--------------------------------------------------------------------------------------
//  オペレータ演算子＝
//--------------------------------------------------------------------------------------
Vector3D &Vector3D::operator=( const Vector3D &vector3D )
{
	//  XYZ軸それぞれの代入
	x = vector3D.x;
	y = vector3D.y;
	z = vector3D.z;

	//  自身のポインタ
	return *this;
}

//--------------------------------------------------------------------------------------
//  オペレータ演算子＋＝
//--------------------------------------------------------------------------------------
Vector3D &Vector3D::operator+=( const Vector3D &vector3D )
{
	//  XYZ軸それぞれの足し算
	x = x + vector3D.x;
	y = y + vector3D.y;
	z = z + vector3D.z;

	//  自身のポインタ
	return *this;
}

//--------------------------------------------------------------------------------------
//  オペレータ演算子－＝
//--------------------------------------------------------------------------------------
Vector3D &Vector3D::operator-=( const Vector3D &vector3D )
{
	//  XY軸それぞれの引き算
	x = x - vector3D.x;
	y = y - vector3D.y;
	z = z - vector3D.z;

	//  自身のポインタ
	return *this;
}

//--------------------------------------------------------------------------------------
//  オペレータ演算子×＝
//--------------------------------------------------------------------------------------
Vector3D &Vector3D::operator*=( const Vector3D &vector3D )
{
	//  XYZ軸それぞれの掛け算
	x = x * vector3D.x;
	y = y * vector3D.y;
	z = z * vector3D.z;

	//  自身のポインタ
	return *this;
}